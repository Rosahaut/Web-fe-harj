(function(){const o=document.createElement("link").relList;if(o&&o.supports&&o.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))n(e);new MutationObserver(e=>{for(const s of e)if(s.type==="childList")for(const a of s.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&n(a)}).observe(document,{childList:!0,subtree:!0});function r(e){const s={};return e.integrity&&(s.integrity=e.integrity),e.referrerPolicy&&(s.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?s.credentials="include":e.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function n(e){if(e.ep)return;e.ep=!0;const s=r(e);fetch(e.href,s)}})();const i=async(t,o={})=>{try{const r=await fetch(t,o);return r.ok?await r.json():{error:(await r.json()).message||"An error occurred"}}catch(r){return console.error("fetchData() error:",r.message),{error:r.message}}},p=async()=>{const o=await i("http://localhost:3000/items");if(o.error){console.log("virhe tapahtui fetch haussa");return}console.log(o)},m=async()=>{const o=await i("http://localhost:3000/users");o.error&&console.log("tapahtui virhe fetch haussa"),console.log(o);const r=document.querySelector(".tbody");r.innerHTML="",o.forEach(n=>{const e=document.createElement("tr");e.innerHTML=`
          <td>${n.username}</td>
          <td>${n.email}</td>
          <td><button class="check" data-id="${n.user_id}">Info</button></td>
          <td><button class="del" data-id="${n.user_id}">Delete</button></td>
          <td>${n.user_id}</td>
        `,r.appendChild(e)}),h()},d=document.querySelector(".info_dialog"),g=document.querySelector(".info_dialog button");g.addEventListener("click",()=>{d.close()});const h=()=>{const t=document.querySelectorAll(".check");console.log(t),t.forEach(o=>{o.addEventListener("click",async r=>{console.log("Klikkasit nappulaa:",r.target);const n=r.target.dataset.id;console.log("Haetaan tietoja käyttäjälle id:llä:",n);const e=await y(n);console.log(e),e&&(d.querySelector("p").innerHTML="",d.showModal(),d.querySelector("p").innerHTML=`
          <div>User ID: <span>${e.user_id}</span></div>
          <div>User Name: <span>${e.username}</span></div>
          <div>Email: <span>${e.email}</span></div>
          <div>Role: <span>${e.user_level}</span></div>`)})})},y=async t=>{const o=await i(`http://localhost:3000/users/${t}`);return o.error?(console.error(`Error fetching item with ID ${t}:`,o.error),alert(`Error: ${o.error}`),null):o},l=document.getElementById("snackbar"),u=(t,o="")=>{l.innerText=t,l.className=`show ${o}`.trim(),setTimeout(()=>{l.className=l.className.replace("show","").trim()},3e3)},f=async t=>{t.preventDefault();const o=document.querySelector("#username").value.trim(),r=document.querySelector("#password").value.trim(),n=document.querySelector("#email").value.trim(),e={username:o,password:r,email:n},s="http://localhost:3000/users",a={body:JSON.stringify(e),method:"POST",headers:{"Content-type":"application/json"}};console.log(a);const c=await i(s,a);if(c.error){console.log(c.error),u("virhe lähettämisessä, täytä kaikki vaadittavat kentät!","error");return}if(c.message){console.log(c),u("onnistui!");return}document.querySelector(".addform").reset(),m()},v=async t=>{const o=`http://localhost:3000/users/${t}`,r=await i(o),n=document.querySelector(".tbody");if(n.innerHTML="",r.error){console.log("Käyttäjää ei löytynyt tai tapahtui virhe");const s=document.createElement("tr");s.innerHTML='<td colspan="5">Käyttäjää ei löytynyt.</td>',n.appendChild(s);return}console.log(`Käyttäjä ID:llä ${t}:`,r);const e=document.createElement("tr");e.innerHTML=`
    <td>${r.username}</td>
    <td>${r.email}</td>
    <td><button class="check" data-id="${r.user_id}">Info</button></td>
    <td><button class="del" data-id="${r.user_id}">Delete</button></td>
    <td>${r.user_id}</td>
  `,n.appendChild(e)},w=async()=>{try{const t=await fetch("https://api.chucknorris.io/jokes/random");console.log(t);const o=await t.json();console.log(o)}catch(t){console.error("Virhe:",t)}},L=t=>{const o=new Date(t),r={timeZone:"utc",year:"numeric",month:"numeric",day:"numeric",hour:"2-digit",minute:"2-digit"};return o.toLocaleString("fi-FI",r)},E=async()=>{const t=document.getElementById("diary");console.log(t);const r=await i("http://localhost:3000/entries");if(r.error){console.log("Tapahtui virhe fetch haussa!!");return}console.log(r),t.innerHTML="",r.forEach(n=>{const e=document.createElement("div");e.classList.add("card");const s=document.createElement("div");s.classList.add("card-img");const a=document.createElement("img");a.src="/img/diary.jpg",a.alt="Diary Image",s.appendChild(a);const c=document.createElement("div");c.classList.add("card-diary"),c.innerHTML=`
        <p><strong>Date:</strong> ${L(n.entry_date)}</p>
        <p><strong>Mood:</strong> ${n.mood}</p>
        <p><strong>Weight:</strong> ${n.weight} kg</p>
        <p><strong>Sleep:</strong> ${n.sleep_hours} hours</p>
        <p><strong>Notes:</strong> ${n.notes}</p>
      `,e.appendChild(s),e.appendChild(c),t.appendChild(e)})};document.querySelector("#app").innerHTML="Oman APIn harjoituksia";console.log("moro maailma scriptit alkaa");w();const $=document.querySelector(".get_items");$.addEventListener("click",p);const S=document.querySelector(".get_users");S.addEventListener("click",m);const b=document.querySelector(".formpost");b.addEventListener("click",f);const k=document.querySelector(".get_user_by_id");k.addEventListener("click",async()=>{const t=document.querySelector("#user_id").value.trim();t?await v(t):console.log("Anna käyttäjän ID")});const q=document.querySelector(".get_entries");q.addEventListener("click",E);
